TODO list for summer 2013.  Here's hoping!

----- Input & Parser

Concatenate multiple files / C-style include.
    Possibly with filters?

Utilities for encoding plain-text files to .dyna files.

Parse QMode pragmas

List notation

Strict end-of-rule punctuation, warn if blank line at plausible end-of-rule
position? (polish for LSA)

----- Frontend

----- Analysis

Mode declarations -> backward chaining!

Detect non-range-restriction and produce a different error message?

Abstract unification really ought not unroll recursion quite so eagerly as
it does. (Probably no time to deal with this; low priority anyway as it only
impacts speed of compilation)

----- Backend

",/2" runtime error if first argument is not true or false
    Probably OK for this one to crash the program!

Check that we have = aggregation working correctly.

Could we maybe get a better chart representation?
	And better queries into the chart?  We should be able to extract
	adorned queries from the planner's output without too much effort...

Prioritization heuristic

Maybe something better for initializers or update API? (Low priority)

----- Documentation

Be sure to mention, repeatedly, that this is experimental software and is
likely to break both early and often.  Explain the difference between panic
messages and errors.

----- REPL

----- Whole pipeline

Can we run anything on e.g. WSJ with L0 grammar?
  sentence(N) = ["The",...]

How about... (other things students might want to do)
	train a log-linear model (e.g. by using := for weights)
	find the K most-frequent bigrams (even from the repl?)

----- Things that still have bits and bobs pending

Forward port shortest path tutorial

Queries (initializers), new rule insertions (both plans and initializers)

Need some better mechanism for executing queries after the agenda empties.
	Take query, feed back to compiler / planner / ...
		In general, we'd need to indicate which set of things we are
		at present maintaining and possibly feed the whole program back
		through the pipeline... if we stick with everything being
		materialized, we can just feed the query through.

DOpAMine improvements for logging of hyper-edges
    Right now we manage this through timv's cleverness in the backend,
    rather than anything formal.

Graphical view of the hypergraph
    Tim has something pretty neat working
